#!/bin/bash
# . /pi/bin/inc/wait_funcs.sh
# . /pi/bin/inc/matchers.sh
# . /pi/bin/inc/docker_utils.sh

. vars.sh

function start_inventory(){
	# mysqld: ready for connections.
	start_docker inventory "$msg_mysql"
}

function push_image(){
	local image=$1
	echo "target hub: $target_hub"
	if [ "$target_hub" == "docker" ]; then
		docker push $image
	else
		docker tag $image registry.cn-hangzhou.aliyuncs.com/$image
		docker push registry.cn-hangzhou.aliyuncs.com/$image
		docker rmi registry.cn-hangzhou.aliyuncs.com/$image
	fi
}

function archive_source(){
	rm -f sagas-stack-0.1.tar.gz
	rm -f sagas-saai-0.1.tar.gz

	echo 'archive ..'
	cd /pi/stack && git archive --prefix=stack/ -o /pi/archive/sagas/sagas-stack-0.1.tar.gz HEAD		
	cd /pi/ws/sagas-ai && git archive --format=tar --prefix=sagas-ai/ HEAD | gzip >/pi/archive/sagas/sagas-saai-0.1.tar.gz
	
	cd /pi/archive/sagas
}

function ensure_archive(){
	read -p "archive sources? [y/n]" -n 1 -r
	echo    # (optional) move to a new line
	if [[ $REPLY =~ ^[Yy]$ ]]
	then
		archive_source
	fi
}

# startup 
if [ $# -lt 1 ]; then	
	echo "available opts: all, zk, storm, repl, ..."
else
	CMD=$1
	case "$CMD" in
	"redis")
		start_docker redis "$msg_redis"
		;;
	"inventory")
		start_inventory
		;;

	"push-base")
		image=samlet/sagas_base:0.1
		push_image $image
		;;
	"push-langprocs")
		push_image samlet/langprocs:0.1
		;;
	"push-stack")
		push_image samlet/sagas_stack:0.1
		;;
	"push-duckling")
		push_image samlet/duckling:2019-12-22
		;;
	"push-wordnet")
		push_image samlet/sagas_wordnet:0.1
		;;
	"push-servants")
		push_image samlet/servant_stack:0.1
		push_image samlet/servant_wordnet:0.1		
		push_image samlet/servant_zh:0.1
		;;
	"push-zh")
		push_image samlet/langpack_zh:0.1
		;;
	"push-ja")
		push_image samlet/servant_ja:0.1
		;;
	"push-western")
		push_image samlet/langpack_western:0.1
		;;

	"build-wordnet")
		read -p "Are you sure to rebuild wordnet image? " -n 1 -r
		echo    # (optional) move to a new line
		if [[ $REPLY =~ ^[Yy]$ ]]
		then
		    mv /pi/build-ctx/data-nltk-ext ./
			mv /pi/build-ctx/data-nltk ./
			docker build -t samlet/sagas_wordnet:0.1 -f sagas-wordnet.dockerfile .
			mv data-nltk /pi/build-ctx/
			mv data-nltk-ext /pi/build-ctx/
		fi		
		;;
	"build-stack")
		docker build -t samlet/sagas_stack:0.1 -f sagas-stack.dockerfile .
		;;
	"build-builder")
		docker build -t samlet/sagas_builder:0.1 -f sagas-builder.dockerfile .
		;;
	"build-source")
		archive_source

		echo 'dockerize ..'
		docker build -t samlet/sagas_source:0.1 -f sagas-source.dockerfile .		
		;;
	"check-zh")
		docker build -t samlet/servant_zh:0.1 -f servant-zh.dockerfile .
		docker run --rm -it -w /pi/stack -v /pi/stack:/pi/stack samlet/servant_zh:0.1 python -m sagas.nlu.parse_servant run 14005
		;;
	"build-servants")
		ensure_archive
		docker build -t samlet/servant_zh:0.1 -f servant-zh.dockerfile .
		docker build -t samlet/servant_ja:0.1 -f servant-ja.dockerfile .
		docker build -t samlet/servant_wordnet:0.1 -f servant-wordnet.dockerfile .
		docker build -t samlet/servant_stack:0.1 -f servant-stack.dockerfile .
		;;
	"rebuild-stack")
		archive_source
		docker build -t samlet/servant_stack:0.1 -f servant-stack.dockerfile .
		;;
	"build-ss")
		docker build -t samlet/servant_stack:0.1 -f servant-stack.dockerfile .
		;;
	"build-ja")
		ensure_archive
		docker build -t samlet/servant_ja:0.1 -f servant-ja.dockerfile .
		;;
	"build-w")
		ensure_archive
		docker build -t samlet/servant_western:0.1 -f servant-western.dockerfile .
		;;
	"build-tool")
		ensure_archive
		docker build -t samlet/sagas_tool:0.1 -f sagas-tool.dockerfile .
		;;
	"build-zh")
		docker build -t samlet/langpack_zh:0.1 -f langpack-zh.dockerfile .
		;;
	"build-western")
		docker build -t samlet/langpack_western:0.1 -f langpack-western.dockerfile .
		;;

	"list")
		docker run --rm samlet/servant_wordnet:0.1 bash -c 'tree /pi'
		;;
	"stack-bash")
		docker run --rm -it -v /pi/stack:/pi/stack samlet/servant_stack:0.1 bash
		;;
	"zh-bash")
		docker run --rm -it -w /pi/stack -v /pi/stack:/pi/stack samlet/langpack_zh:0.1 bash
		;;
	"clear-remotes")
		array=( samlet/servant_wordnet:0.1  samlet/servant_stack:0.1 )
		for image in "${array[@]}"
		do
			docker rmi registry.cn-hangzhou.aliyuncs.com/$image
		done		
		;;
	*)
		# default proc
		handle_cmd ${@:1}
		;;
	esac
fi

